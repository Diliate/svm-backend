generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String         @id @default(uuid())
  name           String
  price          Float
  indications    String
  description    String
  inStock        Boolean
  categoryId     String
  precautions    String[]
  punchline      String
  quantity       String
  dosage         String
  imageUrls      String[]
  featured       Boolean        @default(false)
  limitedOffer   Boolean        @default(false)
  discount       Float?
  discountExpiry DateTime?
  cartItems      CartItem[]
  OrderItem      OrderItem[]
  category       Category       @relation(fields: [categoryId], references: [id])
  ratings        Rating[]
  wishlistItems  WishlistItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  mobile          String?
  wishlistId      Int?
  resetOtp        String?
  resetOtpExpires DateTime?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  addresses       Address[]
  cart            Cart?
  Order           Order[]
  ratings         Rating[]
  wishlist        Wishlist?
}

model Rating {
  id        Int      @id @default(autoincrement())
  productId String
  userId    Int
  rating    Int
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  String
  addedAt    DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
}

model Address {
  id           Int         @id @default(autoincrement())
  type         AddressType @default(HOME)
  city         String
  state        String
  zipCode      String
  userId       Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  addressLine1 String      @default("No Address Provided")
  addressLine2 String?
  user         User        @relation(fields: [userId], references: [id])
  orders       Order[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                   Int         @id @default(autoincrement())
  orderId              String      @unique
  userId               Int
  receipt              String
  amount               Int
  currency             String
  status               String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  shiprocketOrderId    String?
  shiprocketShipmentId String?
  shippingAddressId    Int?
  shippingAddress      Address?    @relation(fields: [shippingAddressId], references: [id])
  user                 User        @relation(fields: [userId], references: [id])
  items                OrderItem[]
}

enum Role {
  ADMIN
  USER
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}
