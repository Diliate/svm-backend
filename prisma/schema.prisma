generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String         @id @default(uuid())
  name           String
  price          Float
  indications    String
  description    String
  inStock        Boolean
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     String
  precautions    String[]
  punchline      String
  quantity       String
  dosage         String
  imageUrls      String[]
  featured       Boolean        @default(false)
  limitedOffer   Boolean        @default(false)
  discount       Float? // Store discount percentage (e.g., 10.0 for 10%)
  discountExpiry DateTime? // For time-sensitive discounts
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  ratings        Rating[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  mobile     String?
  addresses  Address[]
  cart       Cart?     @relation()
  wishist    Wishlist?
  wishlistId Int?
  ratings    Rating[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Rating {
  id        Int      @id @default(autoincrement())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int // Rating value (e.g., 1-5)
  feedback  String? // Optional feedback text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int // Link to the Wishlist model
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String // Link to the Product model
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())
}

model Address {
  id        Int      @id @default(autoincrement())
  area      String
  city      String
  state     String
  zipCode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique // Ensure one cart per user
  user      User       @relation(fields: [userId], references: [id]) // Relation defined here
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int      @id @default(autoincrement())
  orderId   String   @unique
  receipt   String
  amount    Int
  currency  String
  status    String
  createdAt DateTime @default(now())
}
